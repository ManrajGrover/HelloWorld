FORMAT: 1A
HOST: http://localhost:8080/

# Tech Inventory Management System

Tech Inventory Management System is a management software that helps IT Team at Practo manage their inventory with great efficiency and simplicity

# Group User
Defines those who have access to the dashboard

## User details [/user/{id}]

+ Parameters
    + id - User ID

### Get User details by ID [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of user
        + name: Pradesh Khanna (string, required)
            Name of user
        + email: pradeshkhanna@gmail.com (string, required)
            Email id of user
        + contact: 7654321098 (string, required)
            Contact number of user
    
            + Body
                {
                  "id": 1,
                  "name": "Pradesh Khanna",
                  "email": "pradeshkhanna@gmail.com",
                  "contact": "7654321098"
                }

### Deletes a user [DELETE]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of user
        + name: Manraj Singh (string, required)
            Name of user
        + email: manrajsingh@gmail.com (string, required)
            Email of user
        + contact: 9898989898 (string, required)
            Contact number of user
        + message: User has been updated (string, required)
            Message related to request made
    
            + Body
                {
                  "id": 3,
                  "name": "Bhuvnesh Khanna",
                  "email": "bhuvneshkhanna@gmail.com",
                  "contact": "7654321098",
                  "message": "User has been deleted"
                }

### Updates a user [PATCH]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of user
        + name: Manraj Singh (string, required)
            Name of user
        + email: manrajsingh@gmail.com (string, required)
            Email of user
        + contact: 9898989898 (string, required)
            Contact number of user
        + message: User has been updated (string, required)
            Message related to request made
    
            + Body
                {
                  "id": 3,
                  "name": "Bhuvnesh Khanna",
                  "email": "bhuvneshkhanna@gmail.com",
                  "contact": "7654321098",
                  "message": "User has been created"
                }

## All user's details and their creation [/users]

### Get all users [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of user
        + name: Pradesh Khanna (string, required)
            Name of user
        + email: pradeshkhanna@gmail.com (string, required)
            Email id of user
        + contact: 7654321098 (string, required)
            Contact number of user
    
            + Body
                [
                  {
                    "id": 1,
                    "name": "Pradesh Khanna",
                    "email": "pradeshkhanna@gmail.com",
                    "contact": "7654321098"
                  },
                  {
                    "id": 2,
                    "name": "Swadesh Khanna",
                    "email": "swadeshkhanna@gmail.com",
                    "contact": "9879879870"
                  }
                ]

### Creates a new user [POST]

+ Request (application/json)

+ Response 201 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of user
        + name: Manraj Singh (string, required)
            Name of user
        + email: manrajsingh@gmail.com (string, required)
            Email of user
        + contact: 9898989898 (string, required)
            Contact number of user
        + message: User has been updated (string, required)
            Message related to request made
    
            + Body
                {
                  "id": 3,
                  "name": "Bhuvnesh Khanna",
                  "email": "bhuvneshkhanna@gmail.com",
                  "contact": "7654321098",
                  "message": "User has been created"
                }

# Group Roles
Defines roles a user can have

## List All Roles [/roles]

### Get all of the Roles a User can have [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 2 (number, required)
            ID of role
        + name: admin (string, required)
            Role name
    
            + Body
                [
                  {
                    "id": 2,
                    "name": "admin"
                  },
                  {
                    "id": 3,
                    "name": "user"
                  }
                ]

# Group Requests
Defines requests a user can make

## Request Details [/request/{id}]

+ Parameters
    + id - Request ID

### Get Request Details by ID [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of request
        + user_id: 5 (number, required)
            User ID linked to request
        + user_name: Manraj Singh (string, required)
            User's name linked to request
        + product_id: 2 (number, required)
            Product ID linked to request
        + product_name: Apple MacBook (string, required)
            Product name associated with the request
        + product_version: 2016 (string, required)
            Version of product associated with the request
        + reply: Approved (string, required)
            Reply associated with request
    
            + Body
                {
                  "id": 1,
                  "user_id": 2,
                  "user_name": "Pradesh Khanna",
                  "product_id": 3,
                  "product_name": "Apple MacBook",
                  "product_version": "2016",
                  "reply": "Approved"
                }

### Update a request [PATCH]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + id: 1 (number, required)
            ID of request
        + user_id: 5 (number, required)
            User ID linked to request
        + user_name: Manraj Singh (string, required)
            User's name linked to request
        + product_id: 2 (number, required)
            Product ID linked to request
        + product_name: Apple MacBook (string, required)
            Product name associated with the request
        + product_version: 2016 (string, required)
            Version of product associated with the request
        + reply: Approved (string, required)
            Reply associated with request
    
            + Body
                {
                  "id": 1,
                  "user_id": 2,
                  "user_name": "Pradesh Khanna",
                  "product_id": 3,
                  "product_name": "Apple MacBook",
                  "product_version": "2016",
                  "reply": "Approved"
                }


## All request's details and their creation [/requests{?filter}]

+ Parameters
    + filter (string, optional) - approved or pending

### Gets all requests [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + id: 2 (number, required)
            ID of role
        + name: admin (string, required)
            Role name
    
            + Body
                [
                  {
                    "id": 2,
                    "name": "admin"
                  },
                  {
                    "id": 3,
                    "name": "user"
                  }
                ]

### Create a request [POST]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + id: 2 (number, required)
            ID of role
        + name: admin (string, required)
            Role name
    
            + Body
                [
                  {
                    "id": 2,
                    "name": "admin"
                  },
                  {
                    "id": 3,
                    "name": "user"
                  }
                ]

# Group User issues and returns
Provides user's issues and returns

## All of user's issues, returns and creation of same [/history/{user_id}{?filter}]

+ Parameters
    + user_id - History ID
    + filter (string, optional) - returned or issued or current

### Get History of User by User ID [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + user_id: 5 (number, required)
            User ID
        + user_name: Manraj Singh (string, required)
            User's name linked to history
        + issued: item1, item2 (array[object], required)
            Items issued by user
        + issued_returned: item1, item2 (array[object], required)
            Items issued and returned by user
        + current_inventory: item1, item2 (array[object], required)
            Items currently in use
    
            + Body
                {
                  "user_id": 2,
                  "user_name": "Pradesh Khanna",
                  "issued": [{"item1"}, {"item2"}],
                  "issued_returned": [{"item1"}, {"item2"}],
                  "current_inventory": [{"item1"}, {"item2"}]
                }

### Issue an item [POST]

+ Response 201 (application/json)

    + Attributes (object)
        + user_id: 5 (number, required)
            User ID
        + user_name: Manraj Singh (string, required)
            User's name linked to history
        + item_tag: XYZ (string, required)
            Tag of item issued
        + issued_timestamp: time (string, required)
            Timestamp of issue
    
            + Body
                {
                  "user_id": 2,
                  "user_name": "Pradesh Khanna",
                  "item_tag": "XYZ",
                  "issued_timestamp": "12345678"
                }

### Return an item [PATCH]

+ Response 200 (application/json)

    + Attributes (object)
        + user_id: 5 (number, required)
            User ID
        + user_name: Manraj Singh (string, required)
            User's name linked to history
        + item_tag: XYZ (string, required)
            Tag of item issued
        + issued_timestamp: time (string, required)
            Timestamp of issue
        + returned_timestamp: time (string, required)
            Timestamp of return
            + Body
                {
                  "user_id": 2,
                  "user_name": "Pradesh Khanna",
                  "item_tag": "XYZ",
                  "issued_timestamp": "12345678",
                  "returned_timestamp": "87654321"
                }

# Group Item Details
Details of an item

## Item Details [/items/{item_id}]

+ Parameters
    + item_id - ID of item

### Get item details [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + item_id: 5 (number, required)
            Item ID
        + product_name: Apple (string, required)
            Product's name
        + version: 2016 (string, required)
            Product's version
        + events: event1, event2 (array[object], required)
            Events including issues, returns etc.
    
            + Body
                {
                  "item_id": 2,
                  "product_name": "Apple MacBook",
                  "product_version": "2016",
                  "events": [{"event1"}, {"event2"}],
                }

### Add a new item [POST]

+ Response 201 (application/json)

    + Attributes (object)
        + item_id: 5 (number, required)
            Item ID
        + product_name: Apple (string, required)
            Product's name
        + version: 2016 (string, required)
            Product's version
        + item_tag: XYZ (string, required)
            Item's tag
    
            + Body
                {
                  "item_id": 2,
                  "product_name": "Apple MacBook",
                  "product_version": "2016",
                  "item_tag": "XYZ",
                }

### Update an item [PATCH]

+ Response 200 (application/json)

    + Attributes (object)
        + item_id: 5 (number, required)
            Item ID
        + product_name: Apple (string, required)
            Product's name
        + version: 2016 (string, required)
            Product's version
        + item_tag: XYZ (string, required)
            Item's tag
    
            + Body
                {
                  "item_id": 2,
                  "product_name": "Apple MacBook",
                  "product_version": "2016",
                  "item_tag": "XYZ",
                }

### Delete an item [DELETE]

+ Response 200 (application/json)

    + Attributes (object)
        + item_id: 5 (number, required)
            Item ID
        + product_name: Apple (string, required)
            Product's name
        + version: 2016 (string, required)
            Product's version
        + item_tag: XYZ (string, required)
            Item's tag
    
            + Body
                {
                  "item_id": 2,
                  "product_name": "Apple MacBook",
                  "product_version": "2016",
                  "item_tag": "XYZ",
                }

# Group Timeline
Timeline of a user

## Timeline Details [/timeline/{user_id}]

+ Parameters
    + user_id - user id

### Get Timeline of User by User ID [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + user_id: 5 (number, required)
            User ID
        + user_name: Manraj Singh (string, required)
            User's name linked to history
        +events: event1, event2 (array[object], required)
            Events including requests, issues, returns etc.
    
            + Body
                {
                  "user_id": 2,
                  "user_name": "Pradesh Khanna",
                  "events": [{"event1"}, {"event2"}],
                }